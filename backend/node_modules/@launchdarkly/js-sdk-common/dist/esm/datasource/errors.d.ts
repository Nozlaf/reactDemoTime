import { DataSourceErrorKind } from './DataSourceErrorKinds';
export declare class LDFileDataSourceError extends Error {
    constructor(message: string);
}
export declare class LDPollingError extends Error {
    readonly kind: DataSourceErrorKind;
    readonly status?: number;
    readonly recoverable: boolean;
    constructor(kind: DataSourceErrorKind, message: string, status?: number, recoverable?: boolean);
}
export declare class LDStreamingError extends Error {
    readonly kind: DataSourceErrorKind;
    readonly code?: number;
    readonly recoverable: boolean;
    constructor(kind: DataSourceErrorKind, message: string, code?: number, recoverable?: boolean);
}
/**
 * This is a short term error and will be removed once FDv2 adoption is sufficient.
 */
export declare class LDFlagDeliveryFallbackError extends Error {
    readonly kind: DataSourceErrorKind;
    readonly code?: number;
    readonly recoverable: boolean;
    constructor(kind: DataSourceErrorKind, message: string, code?: number);
}
export type StreamingErrorHandler = (err: LDStreamingError) => void;
//# sourceMappingURL=errors.d.ts.map